{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\nconst initialState = {\n  value: 0,\n  status: 'idle'\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk('counter/fetchCount', async amount => {\n  const response = await fetchCount(amount);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(incrementAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(incrementAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.value += action.payload;\n    }).addCase(incrementAsync.rejected, state => {\n      state.status = 'failed';\n    });\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = state => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\nexport default counterSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchCount","initialState","value","status","incrementAsync","amount","response","data","counterSlice","name","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","selectCount","counter","incrementIfOdd","dispatch","getState","currentValue","reducer"],"sources":["/Users/pan/it-kamasutra/cards/src/features/counter/counterSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n\tvalue: number;\n\tstatus: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n\tvalue: 0,\n\tstatus: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk('counter/fetchCount', async (amount: number) => {\n\tconst response = await fetchCount(amount);\n\t// The value we return becomes the `fulfilled` action payload\n\treturn response.data;\n});\n\nexport const counterSlice = createSlice({\n\tname: 'counter',\n\tinitialState,\n\t// The `reducers` field lets us define reducers and generate associated actions\n\treducers: {\n\t\tincrement: (state) => {\n\t\t\t// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n\t\t\t// doesn't actually mutate the state because it uses the Immer library,\n\t\t\t// which detects changes to a \"draft state\" and produces a brand new\n\t\t\t// immutable state based off those changes\n\t\t\tstate.value += 1;\n\t\t},\n\t\tdecrement: (state) => {\n\t\t\tstate.value -= 1;\n\t\t},\n\t\t// Use the PayloadAction type to declare the contents of `action.payload`\n\t\tincrementByAmount: (state, action: PayloadAction<number>) => {\n\t\t\tstate.value += action.payload;\n\t\t},\n\t},\n\t// The `extraReducers` field lets the slice handle actions defined elsewhere,\n\t// including actions generated by createAsyncThunk or in other slices.\n\textraReducers: (builder) => {\n\t\tbuilder\n\t\t\t.addCase(incrementAsync.pending, (state) => {\n\t\t\t\tstate.status = 'loading';\n\t\t\t})\n\t\t\t.addCase(incrementAsync.fulfilled, (state, action) => {\n\t\t\t\tstate.status = 'idle';\n\t\t\t\tstate.value += action.payload;\n\t\t\t})\n\t\t\t.addCase(incrementAsync.rejected, (state) => {\n\t\t\t\tstate.status = 'failed';\n\t\t\t});\n\t},\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd =\n\t(amount: number): AppThunk =>\n\t(dispatch, getState) => {\n\t\tconst currentValue = selectCount(getState());\n\t\tif (currentValue % 2 === 1) {\n\t\t\tdispatch(incrementByAmount(amount));\n\t\t}\n\t};\n\nexport default counterSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAuB,kBAAkB;AAE/E,SAASC,UAAU,QAAQ,cAAc;AAOzC,MAAMC,YAA0B,GAAG;EAClCC,KAAK,EAAE,CAAC;EACRC,MAAM,EAAE;AACT,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGN,gBAAgB,CAAC,oBAAoB,EAAE,MAAOO,MAAc,IAAK;EAC9F,MAAMC,QAAQ,GAAG,MAAMN,UAAU,CAACK,MAAM,CAAC;EACzC;EACA,OAAOC,QAAQ,CAACC,IAAI;AACrB,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAGT,WAAW,CAAC;EACvCU,IAAI,EAAE,SAAS;EACfR,YAAY;EACZ;EACAS,QAAQ,EAAE;IACTC,SAAS,EAAGC,KAAK,IAAK;MACrB;MACA;MACA;MACA;MACAA,KAAK,CAACV,KAAK,IAAI,CAAC;IACjB,CAAC;IACDW,SAAS,EAAGD,KAAK,IAAK;MACrBA,KAAK,CAACV,KAAK,IAAI,CAAC;IACjB,CAAC;IACD;IACAY,iBAAiB,EAAEA,CAACF,KAAK,EAAEG,MAA6B,KAAK;MAC5DH,KAAK,CAACV,KAAK,IAAIa,MAAM,CAACC,OAAO;IAC9B;EACD,CAAC;EACD;EACA;EACAC,aAAa,EAAGC,OAAO,IAAK;IAC3BA,OAAO,CACLC,OAAO,CAACf,cAAc,CAACgB,OAAO,EAAGR,KAAK,IAAK;MAC3CA,KAAK,CAACT,MAAM,GAAG,SAAS;IACzB,CAAC,CAAC,CACDgB,OAAO,CAACf,cAAc,CAACiB,SAAS,EAAE,CAACT,KAAK,EAAEG,MAAM,KAAK;MACrDH,KAAK,CAACT,MAAM,GAAG,MAAM;MACrBS,KAAK,CAACV,KAAK,IAAIa,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC,CACDG,OAAO,CAACf,cAAc,CAACkB,QAAQ,EAAGV,KAAK,IAAK;MAC5CA,KAAK,CAACT,MAAM,GAAG,QAAQ;IACxB,CAAC,CAAC;EACJ;AACD,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEQ,SAAS;EAAEE,SAAS;EAAEC;AAAkB,CAAC,GAAGN,YAAY,CAACe,OAAO;;AAE/E;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAIZ,KAAgB,IAAKA,KAAK,CAACa,OAAO,CAACvB,KAAK;;AAEpE;AACA;AACA,OAAO,MAAMwB,cAAc,GACzBrB,MAAc,IACf,CAACsB,QAAQ,EAAEC,QAAQ,KAAK;EACvB,MAAMC,YAAY,GAAGL,WAAW,CAACI,QAAQ,CAAC,CAAC,CAAC;EAC5C,IAAIC,YAAY,GAAG,CAAC,KAAK,CAAC,EAAE;IAC3BF,QAAQ,CAACb,iBAAiB,CAACT,MAAM,CAAC,CAAC;EACpC;AACD,CAAC;AAEF,eAAeG,YAAY,CAACsB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}